// Generated by proto2javame, Wed Nov 10 20:03:40 MSK 2021.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class User extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String firstName;
	private static final int fieldNumberFirstName = 1;
	private final boolean hasFirstName;

	private final String lastName;
	private static final int fieldNumberLastName = 2;
	private final boolean hasLastName;

	private final int age;
	private static final int fieldNumberAge = 3;
	private final boolean hasAge;

	private final long telNumber;
	private static final int fieldNumberTelNumber = 4;
	private final boolean hasTelNumber;

	private final float weight;
	private static final int fieldNumberWeight = 5;
	private final boolean hasWeight;

	private final float height;
	private static final int fieldNumberHeight = 6;
	private final boolean hasHeight;

	private final String password;
	private static final int fieldNumberPassword = 7;
	private final boolean hasPassword;

	private final String roles;
	private static final int fieldNumberRoles = 8;
	private final boolean hasRoles;


	public static Builder newBuilder() {
		return new Builder();
	}

	private User(final Builder builder) {
		if (true) {
			this.firstName = builder.firstName;
			this.hasFirstName = builder.hasFirstName;
			this.lastName = builder.lastName;
			this.hasLastName = builder.hasLastName;
			this.age = builder.age;
			this.hasAge = builder.hasAge;
			this.telNumber = builder.telNumber;
			this.hasTelNumber = builder.hasTelNumber;
			this.weight = builder.weight;
			this.hasWeight = builder.hasWeight;
			this.height = builder.height;
			this.hasHeight = builder.hasHeight;
			this.password = builder.password;
			this.hasPassword = builder.hasPassword;
			this.roles = builder.roles;
			this.hasRoles = builder.hasRoles;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				"");
		}
	}

	public static class Builder {
		private String firstName;
		private boolean hasFirstName = false;

		private String lastName;
		private boolean hasLastName = false;

		private int age;
		private boolean hasAge = false;

		private long telNumber;
		private boolean hasTelNumber = false;

		private float weight;
		private boolean hasWeight = false;

		private float height;
		private boolean hasHeight = false;

		private String password;
		private boolean hasPassword = false;

		private String roles;
		private boolean hasRoles = false;


		private Builder() {
		}

		public Builder setFirstName(final String firstName) {
			this.firstName = firstName;
			this.hasFirstName = true;
			return this;
		}

		public Builder setLastName(final String lastName) {
			this.lastName = lastName;
			this.hasLastName = true;
			return this;
		}

		public Builder setAge(final int age) {
			this.age = age;
			this.hasAge = true;
			return this;
		}

		public Builder setTelNumber(final long telNumber) {
			this.telNumber = telNumber;
			this.hasTelNumber = true;
			return this;
		}

		public Builder setWeight(final float weight) {
			this.weight = weight;
			this.hasWeight = true;
			return this;
		}

		public Builder setHeight(final float height) {
			this.height = height;
			this.hasHeight = true;
			return this;
		}

		public Builder setPassword(final String password) {
			this.password = password;
			this.hasPassword = true;
			return this;
		}

		public Builder setRoles(final String roles) {
			this.roles = roles;
			this.hasRoles = true;
			return this;
		}

		public User build() {
			return new User(this);
		}
	}

	public String getFirstName() {
		return firstName;
	}

	public boolean hasFirstName() {
		return hasFirstName;
	}

	public String getLastName() {
		return lastName;
	}

	public boolean hasLastName() {
		return hasLastName;
	}

	public int getAge() {
		return age;
	}

	public boolean hasAge() {
		return hasAge;
	}

	public long getTelNumber() {
		return telNumber;
	}

	public boolean hasTelNumber() {
		return hasTelNumber;
	}

	public float getWeight() {
		return weight;
	}

	public boolean hasWeight() {
		return hasWeight;
	}

	public float getHeight() {
		return height;
	}

	public boolean hasHeight() {
		return hasHeight;
	}

	public String getPassword() {
		return password;
	}

	public boolean hasPassword() {
		return hasPassword;
	}

	public String getRoles() {
		return roles;
	}

	public boolean hasRoles() {
		return hasRoles;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasFirstName) retValue += "firstName = " + this.firstName + TAB;
		if(hasLastName) retValue += "lastName = " + this.lastName + TAB;
		if(hasAge) retValue += "age = " + this.age + TAB;
		if(hasTelNumber) retValue += "telNumber = " + this.telNumber + TAB;
		if(hasWeight) retValue += "weight = " + this.weight + TAB;
		if(hasHeight) retValue += "height = " + this.height + TAB;
		if(hasPassword) retValue += "password = " + this.password + TAB;
		if(hasRoles) retValue += "roles = " + this.roles + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasFirstName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFirstName, firstName);
		if(hasLastName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberLastName, lastName);
		if(hasAge) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberAge, age);
		if(hasTelNumber) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberTelNumber, telNumber);
		if(hasWeight) totalSize += ComputeSizeUtil.computeFloatSize(fieldNumberWeight, weight);
		if(hasHeight) totalSize += ComputeSizeUtil.computeFloatSize(fieldNumberHeight, height);
		if(hasPassword) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberPassword, password);
		if(hasRoles) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRoles, roles);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasFirstName) writer.writeString(fieldNumberFirstName, firstName);
		if(hasLastName) writer.writeString(fieldNumberLastName, lastName);
		if(hasAge) writer.writeInt(fieldNumberAge, age);
		if(hasTelNumber) writer.writeLong(fieldNumberTelNumber, telNumber);
		if(hasWeight) writer.writeFloat(fieldNumberWeight, weight);
		if(hasHeight) writer.writeFloat(fieldNumberHeight, height);
		if(hasPassword) writer.writeString(fieldNumberPassword, password);
		if(hasRoles) writer.writeString(fieldNumberRoles, roles);
	}

	static User parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final User.Builder builder = User.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberFirstName:
				builder.setFirstName(reader.readString(fieldNumber));
				break;
			case fieldNumberLastName:
				builder.setLastName(reader.readString(fieldNumber));
				break;
			case fieldNumberAge:
				builder.setAge(reader.readInt(fieldNumber));
				break;
			case fieldNumberTelNumber:
				builder.setTelNumber(reader.readLong(fieldNumber));
				break;
			case fieldNumberWeight:
				builder.setWeight(reader.readFloat(fieldNumber));
				break;
			case fieldNumberHeight:
				builder.setHeight(reader.readFloat(fieldNumber));
				break;
			case fieldNumberPassword:
				builder.setPassword(reader.readString(fieldNumber));
				break;
			case fieldNumberRoles:
				builder.setRoles(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		User.unknownTagHandler = unknownTagHandler;
	}

	public static User parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static User parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static User parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}