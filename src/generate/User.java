// Generated by proto2javame, Wed Nov 10 19:54:58 MSK 2021.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class User extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String firstName;
	private static final int fieldNumberFirstName = 1;

	private final String lastName;
	private static final int fieldNumberLastName = 2;

	private final int age;
	private static final int fieldNumberAge = 3;

	private final long telNumber;
	private static final int fieldNumberTelNumber = 4;

	private final float weight;
	private static final int fieldNumberWeight = 5;

	private final float height;
	private static final int fieldNumberHeight = 6;

	private final String password;
	private static final int fieldNumberPassword = 7;

	private final java.util.Vector roles;
	private static final int fieldNumberRoles = 8;

	private final java.util.Vector test;
	private static final int fieldNumberTest = 9;


	public static Builder newBuilder() {
		return new Builder();
	}

	private User(final Builder builder) {
		if (builder.hasFirstName && builder.hasLastName && builder.hasAge && builder.hasTelNumber && builder.hasWeight && builder.hasHeight && builder.hasPassword ) {
			this.firstName = builder.firstName;
			this.lastName = builder.lastName;
			this.age = builder.age;
			this.telNumber = builder.telNumber;
			this.weight = builder.weight;
			this.height = builder.height;
			this.password = builder.password;
			this.roles = builder.roles;
			this.test = builder.test;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" firstName:" + builder.hasFirstName + " lastName:" + builder.hasLastName + " age:" + builder.hasAge + " telNumber:" + builder.hasTelNumber + " weight:" + builder.hasWeight + " height:" + builder.hasHeight + " password:" + builder.hasPassword + "");
		}
	}

	public static class Builder {
		private String firstName;
		private boolean hasFirstName = false;

		private String lastName;
		private boolean hasLastName = false;

		private int age;
		private boolean hasAge = false;

		private long telNumber;
		private boolean hasTelNumber = false;

		private float weight;
		private boolean hasWeight = false;

		private float height;
		private boolean hasHeight = false;

		private String password;
		private boolean hasPassword = false;

		private java.util.Vector roles = new java.util.Vector();
		private boolean hasRoles = false;

		private java.util.Vector test = new java.util.Vector();
		private boolean hasTest = false;


		private Builder() {
		}

		public Builder setFirstName(final String firstName) {
			this.firstName = firstName;
			this.hasFirstName = true;
			return this;
		}

		public Builder setLastName(final String lastName) {
			this.lastName = lastName;
			this.hasLastName = true;
			return this;
		}

		public Builder setAge(final int age) {
			this.age = age;
			this.hasAge = true;
			return this;
		}

		public Builder setTelNumber(final long telNumber) {
			this.telNumber = telNumber;
			this.hasTelNumber = true;
			return this;
		}

		public Builder setWeight(final float weight) {
			this.weight = weight;
			this.hasWeight = true;
			return this;
		}

		public Builder setHeight(final float height) {
			this.height = height;
			this.hasHeight = true;
			return this;
		}

		public Builder setPassword(final String password) {
			this.password = password;
			this.hasPassword = true;
			return this;
		}

		public Builder setRoles(final java.util.Vector roles) {
			if(!hasRoles) {
				hasRoles = true;
			}
			this.roles = roles;
			return this;
		}


		public Builder addElementRoles(final String element) {
			if(!hasRoles) {
				hasRoles = true;
			}
			roles.addElement(element);
			return this;
		}

		public Builder setTest(final java.util.Vector test) {
			if(!hasTest) {
				hasTest = true;
			}
			this.test = test;
			return this;
		}


		public Builder addElementTest(final uint32 element) {
			if(!hasTest) {
				hasTest = true;
			}
			test.addElement(element);
			return this;
		}

		public User build() {
			return new User(this);
		}
	}

	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public int getAge() {
		return age;
	}

	public long getTelNumber() {
		return telNumber;
	}

	public float getWeight() {
		return weight;
	}

	public float getHeight() {
		return height;
	}

	public String getPassword() {
		return password;
	}

	public java.util.Vector getRoles() {
		return roles;
	}

	public java.util.Vector getTest() {
		return test;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "firstName = " + this.firstName + TAB;
		retValue += "lastName = " + this.lastName + TAB;
		retValue += "age = " + this.age + TAB;
		retValue += "telNumber = " + this.telNumber + TAB;
		retValue += "weight = " + this.weight + TAB;
		retValue += "height = " + this.height + TAB;
		retValue += "password = " + this.password + TAB;
		retValue += "roles = " + this.roles + TAB;
		retValue += "test = " + this.test + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFirstName, firstName);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberLastName, lastName);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberAge, age);
		totalSize += ComputeSizeUtil.computeLongSize(fieldNumberTelNumber, telNumber);
		totalSize += ComputeSizeUtil.computeFloatSize(fieldNumberWeight, weight);
		totalSize += ComputeSizeUtil.computeFloatSize(fieldNumberHeight, height);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberPassword, password);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberRoles, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, roles);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberTest, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, test);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberFirstName, firstName);
		writer.writeString(fieldNumberLastName, lastName);
		writer.writeInt(fieldNumberAge, age);
		writer.writeLong(fieldNumberTelNumber, telNumber);
		writer.writeFloat(fieldNumberWeight, weight);
		writer.writeFloat(fieldNumberHeight, height);
		writer.writeString(fieldNumberPassword, password);
		writer.writeList(fieldNumberRoles, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, roles);
		writer.writeList(fieldNumberTest, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, test);
	}

	static User parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final User.Builder builder = User.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberFirstName:
				builder.setFirstName(reader.readString(fieldNumber));
				break;
			case fieldNumberLastName:
				builder.setLastName(reader.readString(fieldNumber));
				break;
			case fieldNumberAge:
				builder.setAge(reader.readInt(fieldNumber));
				break;
			case fieldNumberTelNumber:
				builder.setTelNumber(reader.readLong(fieldNumber));
				break;
			case fieldNumberWeight:
				builder.setWeight(reader.readFloat(fieldNumber));
				break;
			case fieldNumberHeight:
				builder.setHeight(reader.readFloat(fieldNumber));
				break;
			case fieldNumberPassword:
				builder.setPassword(reader.readString(fieldNumber));
				break;
			case fieldNumberRoles:
				builder.addElementRoles(reader.readString(fieldNumber));
				break;
			case fieldNumberTest:
				Vector vcTest = reader.readMessages(fieldNumberTest);
				for(int i = 0 ; i < vcTest.size(); i++) {
					byte[] eachBinData = (byte[]) vcTest.elementAt(i);
					Uint32.Builder builderTest = Uint32.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolTest = true;
					int nestedFieldTest = -1;
					while(boolTest) {
						nestedFieldTest = getNextFieldNumber(innerInputReader);
						boolTest = Uint32.populateBuilderWithField(innerInputReader, builderTest, nestedFieldTest);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementTest(builderTest.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		User.unknownTagHandler = unknownTagHandler;
	}

	public static User parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static User parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static User parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}