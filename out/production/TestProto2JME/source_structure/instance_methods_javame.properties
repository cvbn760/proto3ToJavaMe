public.compute.size.start = \n\t// Override\n\tpublic int computeSize() {\n\t\tint totalSize = 0;\n
public.compute.size.fields = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3});\n
public.compute.size.fields.nested = \t\ttotalSize += computeNestedMessageSize();\n
public.compute.size.fields.list = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3}.{4}, {5});\n
public.compute.size.fields.optional = \t\tif(has{0}) totalSize += {1}.compute{2}Size(FIELD_NUMBER_{3}, {4});\n
public.compute.size.end = \n\t\treturn totalSize;\n\t}\n

private.compute.message.size.start = \n\tprivate int computeNestedMessageSize() {\n\t\tint messageSize = 0;\n
private.compute.message.size.custom.type = \t\tmessageSize += {0}.computeMessageSize(fieldNumber{1}, {2}.computeSize());\n
private.compute.message.size.custom.type.list = \t\tmessageSize += {0}.computeListSize(fieldNumber{1}, {2}.DATA_TYPE_CUSTOM, {3});\n
private.compute.message.size.custom.type.optional = \t\tif(has{0}) messageSize += {1}.computeMessageSize(fieldNumber{2}, {3}.computeSize());\n
private.compute.message.size.end = \n\t\treturn messageSize;\n\t}\n

public.writefields.start = \n\t// Override\n\tpublic void writeFields(final {0} writer) throws IOException '{'\n
public.writefields.fields = \t\twriter.write{0}(fieldNumber{1}, {2});\n
public.writefields.fields.nested = \t\twriter.writeMessage(fieldNumber{0}, {1}.computeSize());\n\t\t{1}.writeFields(writer);\n
public.writefields.fields.list = \t\twriter.write{0}(fieldNumber{1}, {2}.{3}, {4});\n
public.writefields.fields.list.nested = \t\twriter.writeList(fieldNumber{0}, {1}.DATA_TYPE_CUSTOM, {2});\n
public.writefields.fields.optional = \t\tif(has{3}) writer.write{1}(FIELD_NUMBER_{0}, {2});\n
public.writefields.fields.optional.nested = \t\tif(has{0}) '{' writer.writeMessage(fieldNumber{0}, {1}.computeSize()); {1}.writeFields(writer); '}'\n
public.writefields.end = \t}\n

packageprotected.static.parsefields = \n\tstatic {0} parseFields(final {1} reader) throws IOException '{'\n\t\tint nextFieldNumber = getNextFieldNumber(reader);\n\t\tfinal {0}.Builder builder = {0}.newBuilder();\n\n\t\twhile (nextFieldNumber > 0) '{'\n\t\t\tif(!populateBuilderWithField(reader, builder, nextFieldNumber)) '{'\n\t\t\t\treader.getPreviousTagDataTypeAndReadContent();\n\t\t\t'}'\n\t\t\tnextFieldNumber = getNextFieldNumber(reader);\n\t\t'}'\n\n\t\treturn builder.build();\n\t'}'\n

packageprotected.static.getnextfieldnumber = \n\tstatic int getNextFieldNumber(final {0} reader) throws IOException '{'\n\t\treturn reader.getNextFieldNumber();\n\t'}'\n

packageprotected.static.populatewithfield.start = \n\tpublic static {0} parsing(byte[] b) throws ProtoParserError '{'\n\t\tBuilder builder = {0}.newBuilder();\n\t\tint start = 0;\n\t\twhile(start < b.length) '{'\n\t\tPair pair = Parser{1}.getPair(b, start);\n\t\tswitch (pair.fieldNumber) '{'\n
#packageprotected.static.populatewithfield.fields = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\tbuilder.set{2}(reader.read{1}(fieldNumber));\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\t{1} {2} = Parser{3}.get{4}(pair.content);\n\t\t\t\tbuilder.set{2}({2}); \n\t\t\t\tbreak;\n
#packageprotected.static.populatewithfield.fields.list = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\tbuilder.addElement{0}(reader.read{1}(fieldNumber));\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.list = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\tVector {2} = Parser{1}.getPackedUInt32(pair.content);\n\t\t\t\tfor (int i = 0; i < {2}.size(); i ++) '{'\n\t\t\t\t\tbuilder.add{2}(((Integer){2}.elementAt(i)).intValue());\n\t\t\t\t'}'\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.nested = \t\t\tcase fieldNumber{0}:\n\t\t\t\tVector vc{0} = reader.readMessages(fieldNumber{0});\n\t\t\t\tfor(int i = 0 ; i < vc{0}.size(); i++) '{'\n\t\t\t\t\tbyte[] eachBinData = (byte[]) vc{0}.elementAt(i);\n\t\t\t\t\t{1}.Builder builder{0} = {1}.newBuilder();\n\t\t\t\t\tInputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);\n\t\t\t\t\tboolean bool{0} = true;\n\t\t\t\t\tint nestedField{0} = -1;\n\t\t\t\t\twhile(bool{0}) '{'\n\t\t\t\t\t\tnestedField{0} = getNextFieldNumber(innerInputReader);\n\t\t\t\t\t\tbool{0} = {1}.populateBuilderWithField(innerInputReader, builder{0}, nestedField{0});\n\t\t\t\t\t'}'\n\t\t\t\t\teachBinData = null;\n\t\t\t\t\tinnerInputReader = null;\n\t\t\t\t\tbuilder.set{0}(builder{0}.build());\n\t\t\t\t'}'\n\t\t\t\tbreak;\n

#packageprotected.static.populatewithfield.fields.list.nested = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\tVector vc{0} = reader.readMessages(fieldNumber{0});\n\t\t\t\tfor(int i = 0 ; i < vc{0}.size(); i++) '{'\n\t\t\t\t\tbyte[] eachBinData = (byte[]) vc{0}.elementAt(i);\n\t\t\t\t\t{1}.Builder builder{0} = {1}.newBuilder();\n\t\t\t\t\tInputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);\n\t\t\t\t\tboolean bool{0} = true;\n\t\t\t\t\tint nestedField{0} = -1;\n\t\t\t\t\twhile(bool{0}) '{'\n\t\t\t\t\t\tnestedField{0} = getNextFieldNumber(innerInputReader);\n\t\t\t\t\t\tbool{0} = {1}.populateBuilderWithField(innerInputReader, builder{0}, nestedField{0});\n\t\t\t\t\t'}'\n\t\t\t\t\teachBinData = null;\n\t\t\t\t\tinnerInputReader = null;\n\t\t\t\t\tbuilder.addElement{0}(builder{0}.build());\n\t\t\t\t'}'\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.list.nested = \t\t\tcase FIELD_NUMBER_{0}:\n\t\t\t\tbyte[] content = Parser{1}.getBytes(pair.content);\n\t\t\t\tbuilder.add{2}({3}.parsing(content));
packageprotected.static.populatewithfield.end = \n\t\t\tdefault:break;\n\t\t}\n\t\tif (start >= pair.endContent) throw new ProtoParserError("Err par");\n\t\tstart = pair.endContent;\n\t\t}\n\t\treturn builder.build();\n\t}\n

public.createtobytearraymethod.start = \n\tpublic byte[] toByteArray() {\n\t\tbyte[] result = new byte[0];\n\t\tByteArrayOutputStream bout = new ByteArrayOutputStream();
public.createtobytearraymethod.trystart = \n\t\ttry {
public.createtobytearraymethod.trycontent = \n\t\t\tif (has{0}) bout.write(Serializer{1}.get{2}(FIELD_NUMBER_{3},this.{0}));
public.createtobytearraymethod.trycontent.list.object = \n\t\t\tif (has{0}) bout.write(Serializer{1}.getRepeated(FIELD_NUMBER_{2}, this.get{0}BytePack({0})));
public.createtobytearraymethod.tryend = \n\t\t\tresult = bout.toByteArray();\n\t\t} catch(IOException exc) {}\n\treturn result;\n\t}\n

private.get.byte.pack.method.start = \n\tprivate Vector get{0}BytePack(Vector vector) '{'\n\t\tVector vtr = new Vector();\n\t\tfor (int i = 0; i < vtr.size(); i ++ ) '{'\n\t\t\t{1} {0} = ({1}) vector.get(i);\n\t\t\tvtr.addElement({0}.toByteArray());\n\t\t} return vtr;\n\t}\n

