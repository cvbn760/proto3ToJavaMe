public.getmethods = \n\tpublic {0} get{1}() '{'\n\t\treturn {2};\n\t'}'\n
public.hasmethods = \n\tpublic boolean has{0}() '{'\n\t\treturn has{0};\n\t'}'\n

public.tostring.start = \n\tpublic String toString() {\n\t\tString retValue = "";\n\t\tretValue += this.getClass().getName() + "(";\n
#public.tostring.fields = \t\tretValue += "{0} = " + this.{0} + + "\\r\\n";\n
public.tostring.fields = \t\tif (has{0}) '{'\n\t\t\tretValue += "{0}: \\r\\n";\n\t\t\tfor (int i = 0; i < {0}.size(); i ++) '{'\n\t\t\t\ttry '{'\n\t\t\t\t\tint value = Parser{1}.getUInt32((byte[]) {0}.elementAt(i));\n\t\t\t\t\tretValue += value + "\\r\\n";\n\t\t\t\t'}' catch (ProtoParserError ppe) '{'\n\t\t\t\tppe.printStackTrace();\n\t\t\t\t'}'\n\t\t\t'}'\n\t\t'}'\n\n
public.tostring.fields.optional = \t\tif(has{0}) retValue += "{1} = " + this.{1} + "\\r\\n";\n
public.tostring.end = \t\tretValue += ")";\n\n\t\treturn retValue;\n\t}\n

public.writeto.newbytearray = \n\tpublic byte[] toByteArray() throws IOException {\n\t\tfinal byte[] outputData = createByteArray();\n\t\twriteTo(outputData);\n\n\t\treturn outputData;\n\t}\n

public.writeto.bytearray = \n\tpublic void writeTo(final byte[] data) throws IOException '{'\n\t\tfinal {0} writer = {1}.createOutputUtil(data);\n\t\twriteFields(writer);\n\t'}'\n
public.writeto.outputstream = \n\tpublic void writeTo(final OutputStream outputStream) throws IOException '{'\n\t\tfinal byte[] outputData = createByteArray();\n\n\t\tfinal {0} writer = {1}.createOutputUtil(outputData, outputStream);\n\t\twriteFields(writer);\n\t'}'\n